{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPQp+BkpcpeKPPb9NDDlJGS"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["MERGING AND SPLITTING PFDS"],"metadata":{"id":"hz7gSt_FNuG6"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"yZyO04NrHS_H"},"outputs":[],"source":["!pip install PyPDF2"]},{"cell_type":"code","source":["#Merging Multiple PDF files\n","\n","import PyPDF2\n","\n","def merge_pdf(pdf_list, output_path):\n","    pdf_writer = PyPDF2.PdfWriter()\n","    for pdf in pdf_list:\n","        pdf_reader = PyPDF2.PdfReader(pdf)\n","        for page_num in range(len(pdf_reader.pages)):\n","            pdf_writer.add_page(pdf_reader.pages[page_num])\n","\n","    with open(output_path, 'wb') as out:\n","        pdf_writer.write(out)\n","    print(f\"Merged PDF saved as {output_path}\")\n","\n","\n","#Example\n","merge_pdf(['page1.pdf', 'page2.pdf', 'page3.pdf'], 'merged_pdf.pdf')"],"metadata":{"id":"xqtArp6aIrSS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Splitting PDF file to multiple PDF files/pages\n","\n","import PyPDF2\n","\n","def split_pdf(pdf_path, output_dir):\n","  pdf_reader = PyPDF2.PdfReader(pdf_path)\n","  for page_num in range(len(pdf_reader.pages)):\n","    pdf_writer = PyPDF2.PdfWriter()\n","    pdf_writer.add_page(pdf_reader.pages[page_num])\n","    output_path = f\"{output_dir}/page_{page_num+1}.pdf\"\n","\n","    with open(output_path, 'wb') as out:\n","      pdf_writer.write(out)\n","      print(f\"Merged PDF saved as {output_path}\")\n","\n","#Exmaple\n","split_pdf('merged_pdf.pdf', 'pdf_files')"],"metadata":{"id":"6pKHvQb8Kur-"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["EXTRACTING TEXT FROM THE PDF FILE"],"metadata":{"id":"E7w0tSX5N3fG"}},{"cell_type":"code","source":["!pip install pdfplumber"],"metadata":{"id":"Q5XLfRp7NEra"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Extract Text from the PDF file\n","\n","import pdfplumber\n","\n","def extract_text(pdf_path,output_text_path):\n","    with pdfplumber.open(pdf_path) as pdf:\n","        full_text = \"\"\n","        for page in pdf.pages:\n","            full_text += page.extract_text() + '\\n'\n","\n","        with open(output_text_path, 'w') as f:\n","          f.write(full_text)\n","        print(f\"Extracted text saved as {output_text_path}\")\n","\n","#Example\n","extract_text('page2.pdf', 'extracted_text.txt')"],"metadata":{"id":"F__oRy83Nl6v"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["EXTRACT IMAGES FROM THE PDF FILE"],"metadata":{"id":"W-zOKvKAZFcg"}},{"cell_type":"code","source":["!pip install pymupdf"],"metadata":{"id":"qA-2cw9jZNuE"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Extract images from the PDF file\n","\n","import fitz #PyMuPDF\n","\n","def extract_images(pdf_path, output_dir):\n","  pdf_document = fitz.open(pdf_path)\n","  for page_index in range(len(pdf_document)):\n","    page = pdf_document.load_page(page_index)\n","    image_list = page.get_images()\n","\n","    for image_index, img in enumerate(image_list):\n","      xref = img[0]\n","      base_image = pdf_document.extract_image(xref)\n","      image_bytes = base_image[\"image\"]\n","      image_ext = base_image[\"ext\"]\n","      image_filename = f\"image_{page_index+1}_{image_index+1}.{image_ext}\"\n","\n","      with open (image_filename,'wb') as image_file:\n","        image_file.write(image_bytes)\n","\n","      print(f\"Extracted image saved as {image_filename}\")\n","\n","#Example\n","\n","extract_images('page2.pdf', 'images')\n"],"metadata":{"id":"DzGBOA0yZg70"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["CRAETING PASSWORD PROTECTED PDFS (ECRYPTED PDF FILE)"],"metadata":{"id":"wvg-0NgVcA3p"}},{"cell_type":"code","source":["!pip install Pypdf2"],"metadata":{"id":"usaXo8HxcJng"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Craeting password protected PDFs (Encrypted PDF file)\n","\n","def encrypt_pdf(input_pdf, output_pdf, password):\n","  pdf_reader = PyPDF2.PdfReader(input_pdf)\n","  pdf_writer = PyPDF2.PdfWriter()\n","\n","  for page_num in range(len(pdf_reader.pages)):\n","    pdf_writer.add_page(pdf_reader.pages[page_num])\n","\n","  pdf_writer.encrypt(password)\n","\n","  with open(output_pdf, 'wb') as out:\n","    pdf_writer.write(out)\n","\n","  print(f\"Encrypted PDF saved as {output_pdf}\")\n","\n","\n","\n","#Example\n","encrypt_pdf('page2.pdf', 'encrypted_pdf.pdf', 'password')"],"metadata":{"id":"pL74ShsucZGU"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["REMOVE PASSWORD FROM THE PASSWORD PROTECTED PDF(DECRYPTION)"],"metadata":{"id":"GlKFA12Ud62-"}},{"cell_type":"code","source":["#Remove password from the password protected pdf\n","\n","def decrypt_pdf(input_pdf,output_pdf, password):\n","  pdf_reader = PyPDF2.PdfReader(input_pdf)\n","  pdf_reader.decrypt(password)\n","  pdf_writer = PyPDF2.PdfWriter()\n","\n","  for page_num in range(len(pdf_reader.pages)):\n","    pdf_writer.add_page(pdf_reader.pages[page_num])\n","\n","  with open(output_pdf, 'wb') as out:\n","    pdf_writer.write(out)\n","\n","  print(f\"Decrypted PDF saved as {output_pdf}\")\n","\n","#Example\n","decrypt_pdf('encrypted_pdf.pdf','decrypted.pdf','password')"],"metadata":{"id":"w0iHayL0eG8H"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["RE-ARRANGING PAGES IN THE PDF FILE"],"metadata":{"id":"fnPv6OcwhEa0"}},{"cell_type":"code","source":["#Re-arranging pages in the PDF file\n","\n","def rearrange_page(input_pdf, output_pdf, page_order):\n","  pdf_reader = PyPDF2.PdfReader(input_pdf)\n","  pdf_writer = PyPDF2.PdfWriter()\n","\n","  for page_num in page_order:\n","    pdf_writer.add_page(pdf_reader.pages[page_num])\n","\n","  with open(output_pdf, 'wb') as out:\n","    pdf_writer.write(out)\n","\n","  print(f\"Rearranged PDF saved as {output_pdf}\")\n","\n","\n","#Example\n","\n","rearrange_page('merged_pdf.pdf', 'rearranged_pdf.pdf', [2,1,0])\n","#[2,1,0] means file pages in reverse order"],"metadata":{"id":"YJ_WIlWfhRIV"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["ROTATE PAGES IN THE PDF FILE(FROM PORTRAIT LANDSCAPE VISAVERSA)"],"metadata":{"id":"vm6fO9JIjRsm"}},{"cell_type":"code","source":["#Rotate Pages in the PDF (Portait to landscape or visaversa)\n","\n","def rotate_pages(input_pdf, output_pdf, rotation):\n","  pdf_reader = PyPDF2.PdfReader(input_pdf)\n","  pdf_writer = PyPDF2.PdfWriter()\n","\n","  for page_num in range(len(pdf_reader.pages)):\n","    page = pdf_reader.pages[page_num]\n","    page.rotate(rotation)\n","    pdf_writer.add_page(page)\n","\n","  with open(output_pdf, 'wb') as out:\n","    pdf_writer.write(out)\n","\n","  print(f\"Rotated PDF saved as {output_pdf}\")\n","\n","#Example\n","\n","rotate_pages('page1.pdf', 'rotated_pdf.pdf', 90)\n","#90 0r -90 degree(it will rotate portrate to landscape)\n","#270 or -270 degree for landscape to portrate\n"],"metadata":{"id":"nIOzID3yjlSp"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["ADD THE METADATA TO THE PDF FILE"],"metadata":{"id":"3ixN92CglxiN"}},{"cell_type":"code","source":["#Add the MetaData to the PDF file\n","\n","def add_metadata(input_file,output_file,title,author):\n","  pdf_reader = PyPDF2.PdfReader(input_file)\n","  pdf_writer = PyPDF2.PdfWriter()\n","\n","  for page_num in range(len(pdf_reader.pages)):\n","    pdf_writer.add_page(pdf_reader.pages[page_num])\n","\n","  metadata = {\n","      \"/Title\": title,\n","      \"/Author\": author,\n","      \"/Producer\": ''\n","  }\n","\n","  pdf_writer.add_metadata(metadata)\n","\n","  with open(output_file, 'wb') as out:\n","    pdf_writer.write(out)\n","\n","  print(f\"Metadata added to PDF saved as {output_file}\")\n","\n","#Example\n","\n","add_metadata('page1.pdf', 'with_metadata.pdf', 'Cloud Server', 'Bl4ck30x')"],"metadata":{"id":"PFTKfUu6l1SJ"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["READ THE METADATA OF THE PDF FILE"],"metadata":{"id":"tu_Xayi2k3uV"}},{"cell_type":"code","source":["#Read the metadata of the PDF file\n","\n","def read_metadata(pdf_path):\n","  pdf_reader = PyPDF2.PdfReader(pdf_path)\n","  metadata = pdf_reader.metadata\n","\n","  print(\"Metadat of the PDF file is:\")\n","  for key, value in metadata.items():\n","    print(f\"{key}: {value}\")\n","\n","#Example\n","read_metadata('with_metadata.pdf')"],"metadata":{"id":"LdxFNyiIk85N"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["OPTIMIZE THE SIZE OF THE PDF FILE(COMPRESSING PDF FILE)"],"metadata":{"id":"Xi7RuJnEoilM"}},{"cell_type":"code","source":["#Optimize the file of pdf file\n","\n","\n","def optimize_pdf(input_pdf, output_pdf):\n","  pdf_document = fitz.open(input_pdf)\n","  pdf_document.save(output_pdf,garbage=3,deflate=True)\n","  print(f\"Optimized PDF saved as {output_pdf}\")\n","\n","#Example\n","optimize_pdf('merged_pdf.pdf', 'optimized_pdf.pdf')"],"metadata":{"id":"oCL7ip8Moqa9"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["BUILDING A FILE HANDLING TOOL:CREATING EXECUTABLE (.EXE) FILE FROM PYTHON CODE"],"metadata":{"id":"Vh9sK0FGqNLd"}},{"cell_type":"code","source":["#Building a file Handling Tool: Craeting Executable (.exe) files from Python Code\n","#Merging Multiple PDF files\n","\n","import PyPDF2\n","import os\n","\n","def merge_pdfs(input_folder, output_pdf):\n","    # Remove the existing merged.pdf file if it exists\n","    if os.path.exists(output_pdf):\n","        os.remove(output_pdf)\n","\n","    # Get a list of PDF files in the input folder\n","    pdf_files = [file for file in os.listdir(input_folder) if file.endswith('.pdf')]\n","\n","    # Sort the list of PDF files (this is optional)\n","    pdf_files.sort()\n","\n","    # Create a new PDF writer object\n","    pdf_writer = PyPDF2.PdfWriter()\n","\n","    # Loop through each PDF file and merge it\n","    for pdf_file in pdf_files:\n","        with open(os.path.join(input_folder, pdf_file), 'rb') as file:\n","            pdf_reader = PyPDF2.PdfReader(file)\n","            for page_num in range(len(pdf_reader.pages)):\n","                pdf_writer.add_page(pdf_reader.pages[page_num])\n","\n","    # Write the merged PDF to the output file\n","    with open(output_pdf, 'wb') as output_file:\n","        pdf_writer.write(output_file)\n","\n","# Example\n","input_folder = 'pdf_files'  # Path to the folder containing PDF files to merge\n","output_pdf = 'pdf_files/merged.pdf'  # Output PDF file name (Relative path)\n","\n","merge_pdfs(input_folder, output_pdf)\n"],"metadata":{"id":"Swxl63A7qY1P"},"execution_count":null,"outputs":[]}]}